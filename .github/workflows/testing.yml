name: "Run Tests"

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - '*'

concurrency:
  group: environment-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Determine if tests should be run based on commit message.
  check_skip:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.result_step.outputs.ci-skip }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - id: result_step
        uses: mstachniuk/ci-skip@master
        with:
          commit-filter: '[skip ci];[ci skip];[skip github]'
          commit-filter-separator: ';'

  run_unit_tests:
    needs: check_skip
    if: ${{ needs.check_skip.outputs.skip == 'false' }}
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
            os: ["ubuntu-latest", "macos-latest"]
            python-version: ["3.6", "3.7", "3.8", "3.9"]
    name: Unit tests
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
            python-version: ${{ matrix.python-version }}
      - name: 'Install NiMARE'
        shell: bash {0}
        run: pip install -e .[tests,peaks2maps-cpu]
      - name: 'Run tests'
        shell: bash {0}
        run: make unittest
      - name: 'Upload coverage to CodeCov'
        uses: codecov/codecov-action@v1
        if: success()

  run_unit_tests_with_minimum_dependencies:
    needs: check_skip
    if: ${{ needs.check_skip.outputs.skip == 'false' }}
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
            os: ["ubuntu-latest"]
            python-version: ["3.6"]
    name: Unit tests with minimum dependency versions
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
            python-version: 3.6
      - name: 'Install NiMARE'
        shell: bash {0}
        run: pip install -e .[minimum,tests,peaks2maps-cpu]
      - name: 'Run tests'
        shell: bash {0}
        run: make unittest
      - name: 'Upload coverage to CodeCov'
        uses: codecov/codecov-action@v1
        if: success()

  test_performance_estimators:
    needs: check_skip
    if: ${{ needs.check_skip.outputs.skip == 'false' }}
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
            os: ["ubuntu-latest"]
            python-version: ["3.7"]
    name: Estimator performance tests
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
            python-version: ${{ matrix.python-version }}
      - name: 'Install NiMARE'
        shell: bash {0}
        run: pip install -e .[tests,peaks2maps-cpu]
      - name: 'Run tests'
        shell: bash {0}
        run: make test_performance_estimators
      - name: 'Upload coverage to CodeCov'
        uses: codecov/codecov-action@v1
        if: success()

  test_performance_correctors:
    needs: check_skip
    if: ${{ needs.check_skip.outputs.skip == 'false' }}
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
            os: ["ubuntu-latest"]
            python-version: ["3.7"]
    name: Corrector performance tests
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
            python-version: ${{ matrix.python-version }}
      - name: 'Install NiMARE'
        shell: bash {0}
        run: pip install -e .[tests,peaks2maps-cpu]
      - name: 'Run tests'
        shell: bash {0}
        run: make test_performance_correctors
      - name: 'Upload coverage to CodeCov'
        uses: codecov/codecov-action@v1
        if: success()

  test_performance_smoke:
    needs: check_skip
    if: ${{ needs.check_skip.outputs.skip == 'false' }}
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
            os: ["ubuntu-latest"]
            python-version: ["3.7"]
    name: Smoke performance tests
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: 'Set up python'
        uses: actions/setup-python@v2
        with:
            python-version: ${{ matrix.python-version }}
      - name: 'Install NiMARE'
        shell: bash {0}
        run: pip install -e .[tests,peaks2maps-cpu]
      - name: 'Run tests'
        shell: bash {0}
        run: make test_performance_smoke
      - name: 'Upload coverage to CodeCov'
        uses: codecov/codecov-action@v1
        if: success()
