# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
orbs:
  codecov: codecov/codecov@1.0.5
jobs:

  make_py36_env:
    working_directory: /tmp/src/NiMARE
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/NiMARE
      - restore_cache:  # ensure this step occurs *before* installing dependencies
          key: deps9-{{ checksum "nimare/info.py" }}
      - run:  # will overwrite NiMARE installation each time
          name: Generate environment
          command:  |
            if [[ -e /opt/conda/envs/py36_env ]]; then
                echo "Restoring environment from cache"
                source activate py36_env
            else
                conda create -n py36_env python=3.6 numpy -yq
                source activate py36_env
                pip install -e .[tests,doc,peaks2maps-cpu]
            fi
            python setup.py install --user
      - save_cache:  # environment cache tied to requirements
          key: deps9-{{ checksum "nimare/info.py" }}
          paths:
            - "/opt/conda/envs/py36_env"

  test_py38:
    working_directory: /tmp/src/NiMARE
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/NiMARE
      - run:  # will overwrite NiMARE installation each time
          name: Generate environment
          command:  |
            if [[ -e /opt/conda/envs/py38_env ]]; then
                echo "Restoring environment from cache"
                source activate py38_env
            else
                conda create -n py38_env python=3.8 numpy -yq
                source activate py38_env
                pip install pip -U
                pip install -e .[tests,doc,peaks2maps-cpu]
            fi
            python setup.py install --user
      - run:
          name: Run tests
          command:  |
            apt-get install -yqq make
            source activate py38_env
            make unittest

  test_py37:
    working_directory: /tmp/src/NiMARE
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - persist_to_workspace:
          root: /tmp
          paths:
              - src/NiMARE
      - run:  # will overwrite NiMARE installation each time
          name: Generate environment
          command:  |
            if [[ -e /opt/conda/envs/py37_env ]]; then
                echo "Restoring environment from cache"
                source activate py37_env
            else
                conda create -n py37_env python=3.7 numpy -yq
                source activate py37_env
                pip install -e .[tests,doc,peaks2maps-cpu]
            fi
            python setup.py install --user
      - run:
          name: Run tests
          command:  |
            apt-get install -yqq make
            source activate py37_env
            make unittest

  build_docs:
    working_directory: /tmp/src/NiMARE
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:  # get NiMARE
          at: /tmp
      - restore_cache:  # load environment
          key: deps9-{{ checksum "nimare/info.py" }}
      - run:
          name: Build documentation
          command: |
            source activate py36_env
            apt-get install -yqq make
            make -C docs html
      - store_artifacts:
          path: /tmp/src/NiMARE/docs/_build/html

  style_check:
    working_directory: /tmp/src/NiMARE
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:  # get NiMARE
          at: /tmp
      - restore_cache:  # load environment
          key: deps9-{{ checksum "nimare/info.py" }}
      - run:
          name: Linting
          command:  |
            source activate py36_env
            flake8 /tmp/src/NiMARE/nimare
      - store_artifacts:
          path: /tmp/data/lint

  test_py36_and_coverage:
    working_directory: /tmp/src/NiMARE
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:  # get NiMARE
          at: /tmp
      - restore_cache:  # load environment
          key: deps9-{{ checksum "nimare/info.py" }}
      - run:
          name: Run tests and compile coverage
          command:  |
            apt-get install -yqq make
            apt-get install -yqq curl
            source activate py36_env
            make unittest
      - codecov/upload:
          file: /tmp/src/NiMARE/coverage.xml

  test_performance:
    working_directory: /tmp/src/NiMARE
    docker:
      - image: continuumio/miniconda3
    steps:
      - attach_workspace:  # get NiMARE
          at: /tmp
      - restore_cache:  # load environment
          key: deps9-{{ checksum "nimare/info.py" }}
      - run:
          name: Test reasonable output for combinations of estimators/kernels/correctors
          no_output_timeout: 30m
          command:  |
            apt-get install -yqq make
            source activate py36_env
            make performancetest
      - codecov/upload:
          file: /tmp/src/NiMARE/coverage.xml

  deploy:
    docker:
      - image: continuumio/miniconda3
    steps:
      - checkout
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = $PYPI_USER" >> ~/.pypirc
            echo -e "password = $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: create package
          command: |
            python setup.py sdist
            python setup.py bdist_wheel
      - run:
          name: upload to pypi
          command: |
            pip install twine
            twine upload dist/*

workflows:
  version: 2.1
  run_tests:
    jobs:
      - make_py36_env:
          filters:
            tags:
              only: /.*/
      - test_py36_and_coverage:
          requires:
            - make_py36_env
          filters:
            tags:
              only: /.*/
      - test_performance:
          requires:
            - make_py36_env
          filters:
            tags:
              only: /.*/
      - test_py37:
          filters:
            tags:
              only: /.*/
      - test_py38:
          filters:
            tags:
              only: /.*/
      - build_docs:
          requires:
            - make_py36_env
          filters:
            tags:
              only: /.*/
      - style_check:
          requires:
            - make_py36_env
          filters:
            tags:
              only: /.*/
      - deploy:
          requires:
            - test_py36_and_coverage
            - test_py37
            - test_py38
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
